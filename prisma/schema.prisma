generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  shopifyCustomerId String?    @unique
  email             String    @unique
  firstName         String?
  lastName          String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoginAt       DateTime?

  roleId            String?
  role              Role?     @relation(fields: [roleId], references: [id])

  sessionTokens     SessionToken[]
  activityLogs      ActivityLog[]
  articles          ArticleMetadata[]
  artist            Artist?           @relation(fields: [artistId], references: [id])
  artistId          String?           @unique
  cartId            String?           @unique
  privateRooms      PrivateRoom[]
  tickets           Ticket[]
  profile           Profile?
  links             Links[]
  isPublic          Boolean   @default(false)
  financialEntries  FinancialEntry[]

  @@map("users")
  UserRole UserRole[]
}

model Links {
  id String @id @default(cuid())

  platform String

  url String

  order Int @default(0)

  isPrimary Boolean @default(false)

  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  companyId String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)

  @@index([userId])
  @@index([companyId])
}

model Profile {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  occupation  String?
  description String? @db.Text
  bio         String? @db.Text
  avatarUrl   String?
  backgroundImageUrl String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]
  permissions RolePermission[]

  @@map("roles")
  UserRole UserRole[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // "view_orders", "manage_profile", "access_admin", etc.
  description String?
  resource    String? // "orders", "products", "users", etc.
  action      String? // "create", "read", "update", "delete"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relaciones
  roles RolePermission[]

  @@map("permissions")
}

// Tabla de unión para roles de usuarios
model UserRole {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String? // ID del usuario que asignó el rol

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// Tabla de unión para permisos de roles
model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// Tokens de sesión para gestión de autenticación
model SessionToken {
  id           String   @id @default(cuid())
  userId       String
  accessToken  String   @unique
  refreshToken String   @unique
  idToken      String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isActive     Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session_tokens")
}

// Log de actividades del usuario
model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String // "login", "logout", "order_created", etc.
  resource  String? // Recurso afectado
  metadata  Json? // Datos adicionales en JSON
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

// Configuración de la aplicación
model AppConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // "string", "number", "boolean", "json"

  @@map("app_config")
}

model Artist {
  id           String   @id @default(cuid())
  name         String   @unique // Este será el 'vendor' en Shopify
  user         User?
  bio          String?  @db.Text
  portfolioUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ArticleMetadata {
  id               String @id @default(cuid())
  // ID del artículo de Shopify (ej: gid://shopify/OnlineStoreArticle/12345)
  shopifyArticleId String @unique

  // Relación con el autor en tu sistema
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  // METADATOS ENRIQUECIDOS
  customCategory    String? // Una categoría personalizada que no existe en Shopify
  seoScore          Int? // Puntuación de un análisis SEO que hagas en tu app
  estimatedReadTime Int? // En minutos

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}

model PrivateRoom {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products    PrivateRoomProduct[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, name])
  @@map("private_rooms")
}

model PrivateRoomProduct {
  id            String   @id @default(cuid())
  privateRoomId String
  privateRoom   PrivateRoom @relation(fields: [privateRoomId], references: [id], onDelete: Cascade)
  productId     String // Shopify product GID

  @@unique([privateRoomId, productId])
  @@map("private_room_products")
}

model Ticket {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventId   String // Shopify Product GID for the event
  qrCode    String   @unique
  status    String   @default("VALID") // e.g., VALID, USED, CANCELLED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tickets")
}

enum FinancialEntryType {
  INCOME
  EXPENSE
}

model BankAccount {
  id              String   @id @default(cuid())
  name            String
  bankName        String?
  accountNo       String?
  clabe           String?
  initialBalance  Decimal  @db.Decimal(10,2)
  currentBalance  Decimal  @db.Decimal(10,2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  movements       FinancialEntry[] @relation("BankMovements")
}

enum FinancialEntryStatus {
  PENDING
  PARTIALLY_PAID
  COMPLETED
  CANCELLED
}

model FinancialEntry {
  id            String               @id @default(cuid())
  type          FinancialEntryType
  amount        Decimal              @db.Decimal(10, 2)
  amountPaid    Decimal              @db.Decimal(10, 2) @default(0)
  currency      String               @default("MXN")
  description   String
  date          DateTime             @default(now())
  eventId       String?
  event         Event?               @relation(fields: [eventId], references: [id])
  source        String?
  sourceId      String?
  category      String?
  paymentMethod String?
  relatedParty  String?
  status        FinancialEntryStatus @default(PENDING)
  dueDate       DateTime?
  notes         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime @updatedAt
  bankAccountId String?
  bankAccount   BankAccount? @relation("BankMovements", fields: [bankAccountId], references: [id])
  userId        String?
  user          User?   @relation(fields: [userId], references: [id])
  @@index([eventId])
  @@index([type])
  @@index([date])
  @@index([status])
  @@map("financial_entries")
}

model Event {
  id               String @id @default(cuid())
  shopifyProductId String @unique
  name             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  financialEntries FinancialEntry[]

  @@map("events")
}