generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  shopifyCustomerId String    @unique // GID del customer de Shopify
  email             String    @unique
  firstName         String?
  lastName          String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoginAt       DateTime?

  roles         UserRole[]
  sessionTokens SessionToken[]
  activityLogs  ActivityLog[]

  articles ArticleMetadata[]
  artist   Artist?           @relation(fields: [artistId], references: [id])
  artistId String?           @unique

  cartId String? @unique

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // "view_orders", "manage_profile", "access_admin", etc.
  description String?
  resource    String? // "orders", "products", "users", etc.
  action      String? // "create", "read", "update", "delete"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relaciones
  roles RolePermission[]

  @@map("permissions")
}

// Tabla de unión para roles de usuarios
model UserRole {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String? // ID del usuario que asignó el rol

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

// Tabla de unión para permisos de roles
model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime @default(now())

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

// Tokens de sesión para gestión de autenticación
model SessionToken {
  id           String   @id @default(cuid())
  userId       String
  accessToken  String   @unique
  refreshToken String   @unique
  idToken      String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isActive     Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session_tokens")
}

// Log de actividades del usuario
model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String // "login", "logout", "order_created", etc.
  resource  String? // Recurso afectado
  metadata  Json? // Datos adicionales en JSON
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

// Configuración de la aplicación
model AppConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // "string", "number", "boolean", "json"

  @@map("app_config")
}

model Artist {
  id           String   @id @default(cuid())
  name         String   @unique // Este será el 'vendor' en Shopify
  user         User?
  bio          String?  @db.Text
  portfolioUrl String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ArticleMetadata {
  id               String @id @default(cuid())
  // ID del artículo de Shopify (ej: gid://shopify/OnlineStoreArticle/12345)
  shopifyArticleId String @unique

  // Relación con el autor en tu sistema
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  // METADATOS ENRIQUECIDOS
  customCategory    String? // Una categoría personalizada que no existe en Shopify
  seoScore          Int? // Puntuación de un análisis SEO que hagas en tu app
  estimatedReadTime Int? // En minutos

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([authorId])
}
