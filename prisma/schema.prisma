generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String            @id @default(cuid())
  shopifyCustomerId String?           @unique
  email             String            @unique
  firstName         String?
  lastName          String?
  isActive          Boolean           @default(true)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  lastLoginAt       DateTime?
  artistId          String?           @unique
  cartId            String?           @unique
  roleId            String?
  isPublic          Boolean           @default(false)
  articles          ArticleMetadata[]
  links             Links[]
  profile           Profile?
  activityLogs      ActivityLog[]
  blogPosts         Post[]            @relation("BlogPosts")
  financialEntries  FinancialEntry[]
  privateRooms      PrivateRoom[]
  sessionTokens     SessionToken[]
  tickets           Ticket[]
  UserRole          UserRole[]
  artist            Artist?           @relation(fields: [artistId], references: [id])
  role              Role?             @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Links {
  id        String   @id @default(cuid())
  platform  String
  url       String
  order     Int      @default(0)
  isPrimary Boolean  @default(false)
  userId    String?
  companyId String?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([companyId])
}

model Profile {
  id                 String   @id @default(cuid())
  userId             String   @unique
  occupation         String?
  description        String?
  bio                String?
  createdAt          DateTime @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime @updatedAt @db.Timestamptz(6)
  avatarUrl          String?
  backgroundImageUrl String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  permissions RolePermission[]
  UserRole    UserRole[]
  users       User[]

  @@map("roles")
}

model Permission {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  resource    String?
  action      String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  roles       RolePermission[]

  @@map("permissions")
}

model UserRole {
  id         String   @id @default(cuid())
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  assignedBy String?
  role       Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model SessionToken {
  id           String   @id @default(cuid())
  userId       String
  accessToken  String   @unique
  refreshToken String   @unique
  idToken      String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isActive     Boolean  @default(true)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session_tokens")
}

model ActivityLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  resource  String?
  metadata  Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model AppConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string")

  @@map("app_config")
}

model Artist {
  id           String      @id @default(cuid())
  name         String      @unique
  bio          String?
  portfolioUrl String?
  artistType   ArtistsEnum @default(IMPULSO)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         User?
}

model ArticleMetadata {
  id                String   @id @default(cuid())
  shopifyArticleId  String   @unique
  authorId          String
  customCategory    String?
  seoScore          Int?
  estimatedReadTime Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  author            User     @relation(fields: [authorId], references: [id])

  @@index([authorId])
}

model PrivateRoom {
  id          String               @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  products    PrivateRoomProduct[]
  user        User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("private_rooms")
}

model PrivateRoomProduct {
  id            String      @id @default(cuid())
  privateRoomId String
  productId     String
  privateRoom   PrivateRoom @relation(fields: [privateRoomId], references: [id], onDelete: Cascade)

  @@unique([privateRoomId, productId])
  @@map("private_room_products")
}

model Ticket {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  qrCode    String   @unique
  status    String   @default("VALID")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderId   String?
  quantity  Int      @default(1)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tickets")
}

model BankAccount {
  id             String           @id @default(cuid())
  name           String
  bankName       String?
  accountNo      String?
  clabe          String?
  initialBalance Decimal          @db.Decimal(10, 2)
  currentBalance Decimal          @db.Decimal(10, 2)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  movements      FinancialEntry[] @relation("BankMovements")
}

model FinancialEntry {
  id            String               @id @default(cuid())
  type          FinancialEntryType
  amount        Decimal              @db.Decimal(10, 2)
  currency      String               @default("MXN")
  description   String
  date          DateTime             @default(now())
  eventId       String?
  source        String?
  sourceId      String?
  category      String?
  paymentMethod String?
  relatedParty  String?
  status        FinancialEntryStatus @default(PENDING)
  notes         String?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  amountPaid    Decimal              @default(0) @db.Decimal(10, 2)
  bankAccountId String?
  dueDate       DateTime?
  userId        String?
  bankAccount   BankAccount?         @relation("BankMovements", fields: [bankAccountId], references: [id])
  event         Event?               @relation(fields: [eventId], references: [id])
  user          User?                @relation(fields: [userId], references: [id])

  @@index([eventId])
  @@index([type])
  @@index([date])
  @@index([status])
  @@map("financial_entries")
}

model Technique {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("techniques")
}

model ArtworkType {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("artwork_types")
}

model Location {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("locations")
}

model Event {
  id               String           @id @default(cuid())
  shopifyProductId String           @unique
  name             String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  financialEntries FinancialEntry[]

  @@map("events")
}

model Post {
  id               String         @id @default(cuid())
  title            String
  content          String
  excerpt          String?
  slug             String         @unique
  status           PostStatus     @default(DRAFT)
  featured         Boolean        @default(false)
  postType         PostType       @default(BLOG)
  featuredImageUrl String?
  additionalImages String[]
  metaTitle        String?
  metaDescription  String?
  publishedAt      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  date             DateTime?
  location         String?
  authorId         String
  categories       PostCategory[]
  tags             PostTag[]
  author           User           @relation("BlogPosts", fields: [authorId], references: [id])

  @@index([status])
  @@index([publishedAt])
  @@index([authorId])
  @@index([featured])
  @@index([postType])
  @@map("blog_posts")
}

model Category {
  id          String         @id @default(cuid())
  name        String
  slug        String         @unique
  description String?
  color       String?
  order       Int            @default(0)
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  posts       PostCategory[]

  @@map("blog_categories")
}

model Tag {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  color     String?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  posts     PostTag[]

  @@map("blog_tags")
}

model PostCategory {
  id         String   @id @default(cuid())
  postId     String
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, categoryId])
  @@map("blog_post_categories")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("blog_post_tags")
}

enum FinancialEntryType {
  INCOME
  EXPENSE
}

enum FinancialEntryStatus {
  PENDING
  COMPLETED
  CANCELLED
  PARTIALLY_PAID
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostType {
  BLOG
  EVENT
}

enum ArtistsEnum {
  IMPULSO
  COLLECTIVE
}
